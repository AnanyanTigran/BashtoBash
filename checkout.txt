git checkout branch_name- we can switch with existing branches

 -b/B(branch) new_branch_name [existing_branch] create new branch and switch to it(add existing-branch-name to create new branch from that),with -B it will create new branch if it doesnt exist,oterwise it is reset

git checkout -q/--quiet -quiet, suppress feedback messages

--progress
--no-progress - Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified.   This flag enables progress reporting even if not attached to a terminal, regardless of --quiet.

-f/--force -When switching branches, proceed even if the index or the working tree differs from HEAD, and even if there are untracked files in the way. This is used to throw away local changes and any untracked files or directories that are in the way.

--ours
--theirs -When checking out paths from the index, check out stage #2 (ours) or #3 (theirs) for unmerged paths.

-t
--track - When creating a new branch, set up "upstream" configuration.

-l -Create the new branchâ€™s reflog

-d
--detach -Rather than checking out a branch to work on it, check out a commit for inspection and discardable experiments.This is the default behavior of git checkout <commit> when <commit> is not a branch name.

--orphan <new_branch>- Create a new orphan branch, named <new_branch>, started from <start_point> and switch to it. The first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits.

-m
--merge - When switching branches, if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.
 When a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with git add (or git rm if the merge should result in deletion of the path)
 When checking out paths from the index, this option lets you recreate the conflicted merge in the specified paths.
 When switching branches with --merge, staged changes may be lost.

-p
--patch - You can use git checkout -p to selectively discard edits from your current working tree.

--conflict=<style - The same as --merge option above, but changes the way the conflicting hunks are presented, overriding the merge.conflictStyle configuration variable


